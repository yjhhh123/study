자료구조 : 데이터 단위와 데이터 자체 사이의 물리적 또는 논리적인 관계

### 배열 다루기

```java
int jina;
int yeoneui;
int yoonmi;
int hyungyu;

//제각각 정의된 변수의 집합
```

- 위와 같이 변수를 만들면 변수 이름을 잘못 입력할 수도 있고 변수 이름을 관리하기 어려움
- 변수 이름을 학번 처럼 몇 번째 라고 지정하면 편리함
- 이때 사용하는 것이 배열
- 자료형의 변수인 구성요소가 모인것
- int, double 등 어떤 형이든 상관 없다

### 배열 생성

```java
int []a = new int[5];
//크기가 5인 자료형이 int인 배열 생성 

int[] a; //선언하기
a = new int[5]; //참조하기
```

- 위와 같이 선언하면 배열 본체를 참조할 수 있다
- 배열 변수 이름 [인덱스]  : a[0], a[1] ….
- 배열 변수 이름.length : a.length

```java
 int[] a = new int[5];

       a[1] = 37;
       a[2] = 51;
       a[4] = a[1] * 2;

       for(int n : a){
           System.out.printf("%3d", n);
       }
       
// 출력 : 0 37 51 0 74
// 값을 넣지 않은 것응 0에 가까운 값을 출력한다 int형은 0 출력
```

- 자료형이 boolean 이면 false, char이면 null 문자(’\u000’)

### 배열 요소의 최댓값 구하기

- a[0] 을 max로 하고 a[n]까지 비교 한다
- 즉 if를 n-1회 실행
- 배열 요소를 하나씩 비교 하는 과정 : 주사(스캔)

```java
public class MaxOfArray {
    static int maxOf(int[] a){
        int max = a[0];
        for(int i = 1; i < a.length; i++){
            if(a[i] > max){
                max = a[i];
            }
        }
        return max;
    }
    public static void main(String[]args){
        Scanner scanner = new Scanner(System.in);

        int size = scanner.nextInt();
        int[] human = new int[size];

        for(int i = 0; i < size; i++){
            System.out.print("키 : ");
            human[i] = scanner.nextInt();
        }

        System.out.print("최대 키 : " + maxOf(human));

    }
}

```

- 배열 크기를 5로 한다면 스캔은 n-1 즉 5-1 = 4이다

### 난수로 배열의 최댓값 구하기

```java
Random random = new Random();
random.nextInt(90); // 0 - 89 범위
random.nextInt(90) + 100; //100 - 189 범위

Random rand = new Random(); //seed를 임의로 지정
Random rand = new Random(n); //seed를 n으로 지정
```

- import java.util.Random;
