반복 구조 : 어떤 조건이 성립하는 동안 처리를 반복하여 실행하는 것

while 문 : 실행 전 반복을 계속할지 판단 ⇒ 사전판단반복 (제어식 평가값 true → 명령문 반복)

하나의 변수를 사용하는 반복문은 while문 보다는 for문을 사용하는 것이 좋다

```java
int i;
for(int i = 0; i <=n; i++){
sum += i;
}
//for문을 종료한 뒤에도 변수 i의 값을 사용할 수 있음

for(int i = 1; i <=5; i++){
sum += i;
}

for(int i = 1; i <= 7; i++){
sum += i;
}

같은 이름의 변수를 사용하려면 for문마다 변수를 선언

 int num;

	do{
	      System.out.print("양수 입력 ");
        num = scanner.nextInt();
     }while(num <= 0);
     
  //양수 일때 num까지의 합
  //do while은 무조건 한번 실행 후 계속 반복할 것인지를 판단한다
  //while안의 조건이 참이 될때까지 반복!
  
```

- 사전판단 반복 (while, for) : 루프문을 한 번도 실행하지 않을 수 있다
- 사후판단 반복(do while) : 루프문을 한번은 반드시 실행한다

종료 조건을 알고 있다면 for문에 포함시키지 않는 것이 효율이 좋다

```java
//        for(int i = 1; i <= num; i++){
//            sum += i;
//            if(i == num){
//                System.out.print(i + " = " + sum);
//            }
//            else {
//                System.out.print(i + " + ");
//            }
//        }

for(int i = 1; i < num; i++){
            sum += i;
            System.out.print(i + " + ");
        }

        System.out.print(num + " = " + (sum + num));

//종료 조건을 알지만 num의 수만큼 반복하여 조건을 확인해야함으로 주석친 코드는 효율이 떨어진다
```

- n까지 +-를 번갈아 출력

```java
for(int i = 0; i < num; i++){
            if(i % 2 != 0){
                System.out.print("-");
            }
            else{
                System.out.print("+");
            }
        }
//if문 n번, for문 n번, 나눗셈 n번 실행

 for(int i = 0; i < num/2; i++){
            System.out.print("+-");
        }

        if(num % 2 != 0){
            System.out.print("+");
        }
//for문 n/2, 나눗셈 2번, if문 1번 수행
```

- *을 n개 출력하되 w마다 줄 바꿈

```java
    for(int i = 0; i < n; i++){
            System.out.print("*");
            if(i % w == w - 1){
                System.out.println();
            }
        }

        if(n % w != 0){
            System.out.println();
        }
  //for문 n번, if문 n + 1번
  
  
  //.repeat(x)  문자열을 주어진 횟수 만큼 반복한다
   for(int i = 0; i < n / w; i++){
            System.out.println("*".repeat(w));
        }

        int rest = n % w;
        if(rest != 0){
            System.out.println("*".repeat(rest));
        }
 //for문 n/w번 if문 1번 
```
