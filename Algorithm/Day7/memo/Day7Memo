
### 배열 관련 세부 규칙

- 빈 배열 : 배열 요솟수는 0이어도 된다
- 배열 요소의 접근 : 배열 요소 접근 여부는 런타임(실행 시) 검사 0 미만 또는 배열 요솟수 이상의 인덱스 사용하면 예외 발생
- 배열 초기화의 쉼표와 new 연산자

```java
int [] a = {1,2,3,4,};
int [] a = new int[]{1,2,3,4};
```

- 배열 복제

```java
배열 이름.clone();
```

### 확장 for 문

```java
for(double i : a){
			sum += i;
	}
	
for(int i = 0; i < a.length; i++){
		sum += a[i];
	}
```

- 위의 두 for문의 결과는 같다
- ()안의 콜론은 ‘ ~의 안에 있는’ 이라는 뜻 (for-in문 or for-each)
- 장점 : i < a.length 를 i ≤ a.length 라 하면 오류나는데 방지
- 배열의 요솟수를 조사하는 수고 줄인다
- 배열의 모든 요소를 빼놓지 않고 스캔할 수 있다
- iterator 같은 방법으로 스캔 한다

### 클래스

: 클래스는 서로 다른 여러 데이터형을 자유로이 조합하여 만들 수 있는 자료구조

이름, 키, 시력을 각각 선언한 3개의 배열을 세트로 묶는다 (String, int, double)

클래스 선언

```java
class XYZ{
	int x; //x는 int 형 필드
	long y; //y는 long 형 필드
	double z; //z는 double 형 필드
}
```

- x, y, z 를 필드 라고 한다
- 필드를 세트로 이룬것을 클래스라고 한다

```java
XYZ a; //XYZ형의 클래스형 변수 a 선언
a = new XYZ(); // XYZ 형의 클래스 인스턴스를 생성하고 참조하는 곳에 대입

//한번에 수행 
XYZ a = new XYZ();

//접근 연산자를 사용하여 접근
a.x, a.y, a.z
```

클래스 문법 규칙과 특징

- 필드, 메서드, 생성자 선언시 public, protected, private 지정
- 메서드 생성자는 다중으로 정의할 수 있다
- final로 선언한 필드는 값을 한번만 대입할 수 있다
- 생성자는 새로 생성하는 인스턴스를 초기화하기 위해 사용한다

### 배열 관련 세부 규칙

- 빈 배열 : 배열 요솟수는 0이어도 된다
- 배열 요소의 접근 : 배열 요소 접근 여부는 런타임(실행 시) 검사 0 미만 또는 배열 요솟수 이상의 인덱스 사용하면 예외 발생
- 배열 초기화의 쉼표와 new 연산자

```java
int [] a = {1,2,3,4,};
int [] a = new int[]{1,2,3,4};
```

- 배열 복제

```java
배열 이름.clone();
```

### 확장 for 문

```java
for(double i : a){
			sum += i;
	}
	
for(int i = 0; i < a.length; i++){
		sum += a[i];
	}
```

- 위의 두 for문의 결과는 같다
- ()안의 콜론은 ‘ ~의 안에 있는’ 이라는 뜻 (for-in문 or for-each)
- 장점 : i < a.length 를 i ≤ a.length 라 하면 오류나는데 방지
- 배열의 요솟수를 조사하는 수고 줄인다
- 배열의 모든 요소를 빼놓지 않고 스캔할 수 있다
- iterator 같은 방법으로 스캔 한다

### 클래스

: 클래스는 서로 다른 여러 데이터형을 자유로이 조합하여 만들 수 있는 자료구조

이름, 키, 시력을 각각 선언한 3개의 배열을 세트로 묶는다 (String, int, double)

클래스 선언

```java
class XYZ{
	int x; //x는 int 형 필드
	long y; //y는 long 형 필드
	double z; //z는 double 형 필드
}
```

- x, y, z 를 필드 라고 한다
- 필드를 세트로 이룬것을 클래스라고 한다

```java
XYZ a; //XYZ형의 클래스형 변수 a 선언
a = new XYZ(); // XYZ 형의 클래스 인스턴스를 생성하고 참조하는 곳에 대입

//한번에 수행 
XYZ a = new XYZ();

//접근 연산자를 사용하여 접근
a.x, a.y, a.z
```

클래스 문법 규칙과 특징

- 필드, 메서드, 생성자 선언시 public, protected, private 지정
- 메서드 생성자는 다중으로 정의할 수 있다
- final로 선언한 필드는 값을 한번만 대입할 수 있다
- 생성자는 새로 생성하는 인스턴스를 초기화하기 위해 사용한다
