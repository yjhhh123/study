---

### 스택

- 데이터를 일시적으로 쌓아 놓는 자료구조
- 입력과 출력 순서 = 선입 선출(LIFO : Last In First Out)
- 가장 나중에 넣은 데이터를 가장 먼저 꺼냄
- push : 데이터를 넣음
- pop : 데이터를 꺼냄
- push, pop 이 이루어지는 쪽 : 꼭대기 (top)
- 스택의 가장 아랫 부분 : 바닥 (bottom)

![스크린샷 2025-03-12 오후 2.59.11.png](attachment:417528e6-aee9-49f7-8a76-5ba85a8c97af:스크린샷_2025-03-12_오후_2.59.11.png)

스택용 배열 stk

- 푸쉬된 데이터를 저장하는 스택용 배열
- 가장 먼저 푸쉬된 데이터를 저장하는 곳 stk[0]

스택 용량 capacity

- 스택 용량(스택에 쌓을 수 있는 최대 데이터 수)를 나타내는 int 형 필드

스택 포인터 ptr

- 스택에 쌓여 있는 데이터 수를 나타내는 필드
- 스택이 비어 있으면 ptr = 0
- 스택이 차있으면 capacity 값과 같음

생성자 IntStack

- 스택용 배열 본체를 생성하는 준비 작업
- 비어 있으면 스택 포인터 ptr = 0
- 매개변수 maxlen으로 받는 값을 capacity에 대입 후 요솟수가 capacity인 배열 본체 생성

푸시 메서드 push

- 스택에 데이터를 푸시하는 메서드
- 스택이 가득 차서 푸시할 수 없는 경우 예외 OverflowIntStackException
- 배열 요소 stk[ptr]에 저장하고 스택 포인터를 1 증가

팝 메서드 pop

- 스택의 꼭대기에 있는 데이터를 팝(제거)하고 그 값을 반환한다
- 스택이 비어 있어 팝할 수 없는 경우 예외 EmptyIntStackException
- 푸시 할때 ptr++ 로 저장 되므로 - -ptr 로 값을 반환한다

피크 메서드 peek

- 스택의 꼭대기에 있는 데이터를 들여다 보는 메서드
- 스택이 비어 있으면 예외를 보낸다
- ptr ++ 로 값이 저장되어 있으므로 stk[ptr - 1]이 꼭대기
- 데이터를 넣거나 빼지 않으므로 포인터 변화 x

스택의 모든 요소를 삭제하는 메서드 clear

- 스택에 쌓여 있는 모든 메서드를 한번에 삭제하는 메서드
- 배열의 값을 변경할 것 없이 ptr을 0으로 하면 끝난다
- 값은 남아 있지만 포인터를 0으로 해버림

검색 메서드 idexOf

- stk에 x와 같은 데이터가 포함되어 있는지 조사하는 메서드
- 꼭대기 → 바닥 방향으로 선형 검색을 수행한다 (배열 인덱스가 큰쪽 → 작은쪽)
- 이유 : 먼저 팝되는 데이터를 찾기 위해
- 발견 하면 i 실패하면 -1

용량을 확인하는 메서드 getCapacity

- 스택의 용량을 반환하는 메서드
- capacity값을 그대로 반환

데이터의 개수를 확인하는 메서드 size

- 현재 스택에 쌓여 있는 데이터 개수(ptr)를 반환하는 메서드

스택이 비어 있는지 검사하는 메서드 isEmpty

- 스택이 비어 있는지 검사하는 메서드
- 스택이 비어 있으면 true
- 스택이 비어있지 않으면 false
- 판단식 : ptr ≤ 0 or ptr == 0

스택이 가득 찼는지 검사하는 메서드 isFull

- 스택이 가득 찼는지 검사하는 메서드
- 스택이 가득 찼으면 true
- 스택이 가득 차지 않으면 false
- 판단식 : ptr ≥ capacity or ptr == capacity

스택 안에 모든 데이터를 출력하는 메서드 dump

- 바닥 → 꼭대기 순으로 출력
- 비어 있으면 비어있다고 출력
