### 스택

- 데이터를 일시적으로 쌓아 놓는 자료구조
- 입력과 출력 순서 = 선입 선출(LIFO : Last In First Out)
- 가장 나중에 넣은 데이터를 가장 먼저 꺼냄
- push : 데이터를 넣음
- pop : 데이터를 꺼냄
- push, pop 이 이루어지는 쪽 : 꼭대기 (top)
- 스택의 가장 아랫 부분 : 바닥 (bottom)

![스크린샷 2025-03-12 오후 2.59.11.png](attachment:417528e6-aee9-49f7-8a76-5ba85a8c97af:스크린샷_2025-03-12_오후_2.59.11.png)

스택용 배열 stk

- 푸쉬된 데이터를 저장하는 스택용 배열
- 가장 먼저 푸쉬된 데이터를 저장하는 곳 stk[0]

스택 용량 capacity

- 스택 용량(스택에 쌓을 수 있는 최대 데이터 수)를 나타내는 int 형 필드

스택 포인터 ptr

- 스택에 쌓여 있는 데이터 수를 나타내는 필드
- 스택이 비어 있으면 ptr = 0
- 스택이 차있으면 capacity 값과 같음

생성자 IntStack

- 스택용 배열 본체를 생성하는 준비 작업
- 비어 있으면 스택 포인터 ptr = 0
- 매개변수 maxlen으로 받는 값을 capacity에 대입 후 요솟수가 capacity인 배열 본체 생성

푸시 메서드 push

- 스택에 데이터를 푸시하는 메서드
- 스택이 가득 차서 푸시할 수 없는 경우 예외 OverflowIntStackException
- 배열 요소 stk[ptr]에 저장하고 스택 포인터를 1 증가

팝 메서드 pop

- 스택의 꼭대기에 있는 데이터를 팝(제거)하고 그 값을 반환한다
- 스택이 비어 있어 팝할 수 없는 경우 예외 EmptyIntStackException
- 푸시 할때 ptr++ 로 저장 되므로 - -ptr 로 값을 반환한다

피크 메서드 peek

- 스택의 꼭대기에 있는 데이터를 들여다 보는 메서드
- 스택이 비어 있으면 예외를 보낸다
- ptr ++ 로 값이 저장되어 있으므로 stk[ptr - 1]이 꼭대기
- 데이터를 넣거나 빼지 않으므로 포인터 변화 x

스택의 모든 요소를 삭제하는 메서드 clear

- 스택에 쌓여 있는 모든 메서드를 한번에 삭제하는 메서드
- 배열의 값을 변경할 것 없이 ptr을 0으로 하면 끝난다
- 값은 남아 있지만 포인터를 0으로 해버림

검색 메서드 idexOf

- stk에 x와 같은 데이터가 포함되어 있는지 조사하는 메서드
- 꼭대기 → 바닥 방향으로 선형 검색을 수행한다 (배열 인덱스가 큰쪽 → 작은쪽)
- 이유 : 먼저 팝되는 데이터를 찾기 위해
- 발견 하면 i 실패하면 -1

용량을 확인하는 메서드 getCapacity

- 스택의 용량을 반환하는 메서드
- capacity값을 그대로 반환

데이터의 개수를 확인하는 메서드 size

- 현재 스택에 쌓여 있는 데이터 개수(ptr)를 반환하는 메서드

스택이 비어 있는지 검사하는 메서드 isEmpty

- 스택이 비어 있는지 검사하는 메서드
- 스택이 비어 있으면 true
- 스택이 비어있지 않으면 false
- 판단식 : ptr ≤ 0 or ptr == 0

스택이 가득 찼는지 검사하는 메서드 isFull

- 스택이 가득 찼는지 검사하는 메서드
- 스택이 가득 찼으면 true
- 스택이 가득 차지 않으면 false
- 판단식 : ptr ≥ capacity or ptr == capacity

스택 안에 모든 데이터를 출력하는 메서드 dump

- 바닥 → 꼭대기 순으로 출력
- 비어 있으면 비어있다고 출력

---

### 큐

- 스택과 마찬가지로 데이터를 일시적으로 쌓아 놓는 자료구조
- 가장 먼저 넣은 데이터를 가장 먼저 꺼낸다

![스크린샷 2025-03-13 오후 3.39.47.png](attachment:ebc0f91a-e060-4e97-9b4b-baea0c93c0e0:스크린샷_2025-03-13_오후_3.39.47.png)

인큐 : 큐에 데이터를 넣음

디큐 : 큐에서 데이터를 꺼냄

프런트 : 데이터가 나오는 쪽

리어 : 데이터를 넣는 쪽

### 링 버퍼로 큐 만들기

배열 요소를 앞쪽으로 옮기지 않는 큐

![스크린샷 2025-03-13 오후 3.45.50.png](attachment:26bfc3ac-cdde-4d4c-adcb-5414371f3c8a:스크린샷_2025-03-13_오후_3.45.50.png)

큐로 사용할 배열 que 

- 인큐하는 데이터를 저장하기 위한 큐 본체용 배열

큐의 최대용량 capacity

- 큐의 최대 용량을 저장하는 필드로 최대 요솟수와 같다

프런트 front

- 인큐하는 데이터 가운데 맨 앞 요소의 인덱스를 저장하는 필드

리어 rear

- 인큐하는 데이터 가운데 맨 뒤에 넣은 요소 하나 뒤 인덱스를 저장하는 필드
- 다음  인큐 할 때 데이터가 저장될 요소의 인덱스를 미리 준비해두는 것

현재 데이터 개수 num

- 큐에 쌓여 있는 데이터 개수를 나타내는 int형 필드
- front 와 rear가 같을 때 비었는지 가득 찼는지 구분하기 위해 필요
- num = 0 큐가 비어 있다
- num = capacity 큐가 곽 찼다
- 다른 상황으로 front와 rear이 둘다 0이 아닌데 큐가 빈경우도 있다

생성자 IntQuese

- 본체용 배열을 생성하는 준비 작업 수행
- 생성시 큐는 비어 있으므로 num, front, rear 모두 0
- maxlen으로 전달 받은 큐의 용량을 필드 capacity에 복사하고 요솟수가 capacity인 que 배열을 생성

인큐 메서드 enque

- 큐에 데이터를 인큐하고 인큐한 값을 그대로 반환하는 메서드
- 큐가 가득 찼다면 예외 처리

디큐 메서드 deque

- 큐에서 데이터를 디큐하고 그값을 반환하는 메서드
- 큐가 비어 있다면 예외 처리

피크 메서드 peek

- 맨 앞의 데이터를 들여다 보는 메서드
- que[front] 값을 조사만 하고 데이터를 꺼내지는 않으므로 값의 변화가 없다
- 큐가 비었으면 예외 처리

모든 데이터를 삭제하는 메서드 clear

- num, rear, front를 0으로 바꾼다

검색 메서드 indexOf

- x와 같은 값이 있는 위치를 조사
- idx 계산식 (i + front) % capacity
- front가 0부터 시작하지 않을 수 있으므로 front를 더해서 순회하여 조사

최대 용량을 확인하는 메서드 getCapacity

- 큐의 최대 용량을 반환하는 메서드

데이터 개수를 확인하는 메서드 size

- 현재 큐에 들어 있는 데이터 개슈를 반환하는 메서드

큐가 비어 있는지 판단하는 메서드 isEmpty

- num ≤ 0

큐가 가득 찼는지 판단하는 메서드 isFull

- num ≥ 0

모든 데이터를 출력하는 메서드 dump

- 큐에 들어 있는 모든 데이터를 프런트 → 리어 순으로 출력

### 링 버퍼의 활용

: 오래된 데이터를 버리는 용도

ex) 요솟수가 n인 배열에 계속 데이터가 입력될 때 최근에 들어온 데이터 n개만 저장하고 오래된 데이터는 버린다
