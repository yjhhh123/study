### Arrays에서 제공하는 binsearch

```java
import java.util.Arrays;

int idx = Arrays.binSearch(x, ky);
// x = 배열, ky = 찾을 값
```

### 클래스 메서드와 인스턴스 메서드

- 인스턴스 메서드(비정적 메서드) : static 을 붙이지 않음
- 클래스 메서드(정적 메서드) : static을 붙임

인스턴스 : 고유한 값을 가진다 

클래스 : 모든 객체가 동일하게 공유하는 값

---

### 자연 정렬

binarySearch 메서드에 배열과 키값을 전달하는 간단한 방법으로 검색할 수 있는 이유 

⇒ String 클래스가 Comparable<T> 인터페이스와 compareTo 메서드를 구현하고 있기 때문

| 문자열 정렬 | 자연 정렬 |
| --- | --- |
| 텍스트1.txt | 텍스트1.txt |
| 텍스트10.txt | 텍스트2.txt |
| 텍스트100.txt | 텍스트10.txt |
| 텍스트2.txt | 텍스트21.txt |
| 텍스트21.txt | 텍스트100.txt |

문자열 정렬 : 동일한 위치에 있는 문자열의 대소를 비교하여 정렬 

### 자연 정렬이 되지 않은 배열에서 검색

 : 제네릭 메서드를 사용함

```java
static <T> int binarySearch(T[] a, T key, Comparator<? super T> c)
//(검색 대상, 찾을 값, 어떤 식으로 찾을 것인가 (오름차순)
```

- 첫 번째 매개변수 : 검색 대상
- 두 번째 매개변수 : key 값
- 세 번째 매개변수 : 각 요소의 대소 관계를 어떻게 파악 할 것인가
- 제네릭 메서드 : 자료형에 구애를 받지 않는다 (Integer, String, PhyscData등 어떤 것을 전달 해도 됨)

### 매개변수 Comparator<? super T> c)

O1 , O2  비교

- O1 > O2 양수 반환
- O1 < O2 음수 반환
- O1 == O2 0반환

```java
// java.util.Comparator정의                                            
pacage java.util;

public interface Comparator<T>{
int compare(T o1, T o2);
// O1 > O2 양수 반환
// O1 < O2 음수 반환
// O1 == O2 0반환
boolean equals(Object obj);
//this와 c가 같으면 true 
//this와 c가 같지 않으면 false
```

### 제네릭스

: 처리 대상의 자료형에 의존하지 않도록 클래스를 구현하는 기능 (범용으로 사용할 수 있다)

```java
class 클래스 이름 <매개변수> { }
interface 인터페이스 이름 <매개변수> { }

class 클래스 이름 <매개변수1, 매개변수2 ....>{}
interface 인터페이스 이름 <매개변수1, 매개변수2 ....?{}
```

- 대문자는 1개를 사용한다(소문자는 가급적 사용하지 않는다)
- 컬렉션 내부요소의 자료형은 element의 머리글자인 Efmf tkdydgksek
- 맵 내 키와 값의 자료형은 key와 value의 머리글자인 K, V사용한다
- 일반적인 자료형은 T를 사용한다

컬렉션 : 자바에서 제공하는 기본 자료구조를 모은 것을 말한다 

파라미터에는 와일드 카드를 지정할 수도 있다

<? extends T> : 클래스 T의 하위 클래스를 전달 받는다

<? super T> : 클래스 T의 상위 클래스를 전달 받는다
