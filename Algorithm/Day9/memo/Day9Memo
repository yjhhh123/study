### 복잡도 구하기

프로그램 실행 속도는 프로그램이 동작하는 하드웨어나 컴파일러 등의 조건에 따라 다르다

복잡도 : 알고리즘 성능을 객관적으로 평가하는 기준 

- 시간 복잡도 : 실행에 필요한 시간을 평가
- 공간 복잡도 : 기억 영역과 파일 공간이 얼마나 필요한가를 평가

```java
static int seqSearch(int[] a, int n, int key){
//1	int i = 0;
	
//2	while(i < n){
//3		if(a[i] == key){
//4			return i; //검색 성공
//5		i++;
	 	}
//6	return -1; //검색 실패 
}

```

| 단계 | 실행 횟수  | 복잡도  |
| --- | --- | --- |
| 1 | 1 | O(1) |
| 2 | n/2 | O(n) |
| 3 | n/2 | O(n) |
| 4 | 1 | O(1) |
| 5 | n/2 | O(n) |
| 6 | 1 | O(1) |

1, 4, 6 : 한 번 실행하고 나서 이후에는 없음 ⇒ O(1)로 표현

2, 3, 5 : n번 실행 해야하지만 평균적으로 n/2회 실행할 확률이 높다 ⇒ O(n)으로 표현

```java
static int binSearch(int[] a, int n, int key){
	//1 int pl = 0;
	//2 int pr = n - 1;
	
	do{
 //3		int pc = (pl + pr) / 2;
 //4	if (a[pc] == key){
 //5			return pc;
		}
 //6		else if (a[pc] < key){
//7			pl = pc + 1;
		}
		else
	//8		pl = pc - 1;
	//9	}while(pl <= pr);
	
//10	return -1;
}
```

| 단계 | 실행 횟수 | 복잡도 |
| --- | --- | --- |
| 1 | 1 | O(1) |
| 2 | 1 | O(1) |
| 3 | logn | O(logn) |
| 4 | logn | O(logn) |
| 5 | 1 | O(1) |
| 6 | 1 | O(1) |
| 7 | logn | O(logn) |
| 8 | logn | O(logn) |
| 9 | logn | O(logn) |
| 10 | 1 | O(1) |

검색할 요소가 절반 씩 줄어든다 ⇒ logn
