### 사용자 관리

![스크린샷 2025-03-08 오후 10.19.56.png](attachment:b96dea17-7c80-4bf7-b44e-0f3e8df3a353:스크린샷_2025-03-08_오후_10.19.56.png)

- 좌측 패널 adminstartion - user and privileges ⇒ 사용자 생성 가능
- 권한 설정 가능하다

---

### SELECT문

구조 : select 열이름 from 테이블 이름

```sql
//가장 기본 적인 구조 전부 필수로 적어야 하는 것은 아니고 몇개 생략 가능
SELECT 
FROM 
WHERE
GROUP BY
HAVING BY
ORDER BY
```

```sql
SELECT 열이름
FROM 테이블 이름
WHERE 조건 
```

### USE 구문

: 내가 이제부터 이 데이터 베이스를 사용하겠다 

```sql
USE DB이름;
USE employees;
```

원하는 열이름만 조회 (, 로 여러개 가능)

```sql
SELECT first_name FROM employees;
SELECT first_name,last_name FROM employees;
```

주석 : — 하고 띄어쓰기 

여러줄 주석 : /*  …. */ 

현재 테이블 목록(다양한 상세 목록도 상세하게 나온다)

```sql
SHOW TABLE STATUS;
```

테이블에 어떤 열이 있는지 궁금하다(열이름, 타입 등등)

```sql
DESC 테이블 이름
DESCRIBE 테이블 이름
```

### 앞으로의 실습을 위한 테이블

![스크린샷 2025-03-12 오후 8.32.03.png](attachment:669b5974-0b9b-4619-a9a3-5c741e0f1676:스크린샷_2025-03-12_오후_8.32.03.png)

### userTbl

char vs vchar

char(8) : 고정형 문자 (Id에서 사용) 최대 8 글자 3글자 입력해도 내부적으로 8글자 잡힘

vchar(10) : 가변형 문자  최대 10글자 이지만 내부적으로 입력한 글자만큼 잡힘

전화번호 : 문자로 취급 (0으로 시작하고, - 이 들어갈 수 있다, 휴대폰이 없을 수도 있으므로 null 허용)

smallint : 정수형은 -21억 ~ + 21억, smallint : -32768 ~ 32767

buyTbl

순번 : 자동 상승 되게 autoincreament (insert 할 때 null로 넣어준다)

pk - fk 관계 : FOREIGN KEY (userID) REFERENCES usertbl(userId);

### WHERE 절

특정한 조건의 데이터 조회

SELECT … FROM …WHERE … 

```sql
SELECT 필드이름 FROM 테이블 이름 WHERE 조건식;
SELECT * FROM usertbl WHERE name = '김경호';
```

관계 연산자 사용

1970년 이후 신장이 182 이상인 사람의 아이디와 이름 조회

```sql
SELECT userId, name FROM usertbl WHERE height >= 182 AND birthyear >= 1970;
```

1970년 이후에 출생 했거나신장이 182이상인 사람의 아이디와 이름 조회 

```sql
SELECT userId, name FROM usertbl WHERE height >= 182 OR birthyear >= 1970;
```

BETWEEN … AND 와 IN() 그리고 LIKE

키가 180 ~ 183 인 사람 

```sql
SELECT name FROM usertbl WHERE height >= 180 AND height <= 183;

SELECT name FROM usertbl  WHERE height BETWEEN 180 AND 183;
```

사는 지역이 경남이나 전남이나 경북

연속적인 값 조회 시 IN을 사용한다 

```sql
SELECT name FROM usertbl WHERE addr = '경남' OR addr = '전남' OR addr = '경북';

SELECT name FROM usertbl WHERE addr IN ('경남', '전남','경북');
```

like 연산자 

성이 김씨인 사람만 

```sql
SELECT * FROM usertbl WHERE name LIKE '김%';
SELECT name FROM usertbl WHERE addr = '경남' OR addr = '전남' OR addr = '경북';
```

- = 은 조회가 안된다
- % 는 꼭 LIKE로 조회

_종신  : 성씨는 상관 없고 이름이 종신인 사람 조회 

ANY/ALL/SOME 그리고 서브 쿼리 

서브 쿼리 : 쿼리문 안에 쿼리문이 있는 것

김경호라는 사람의 키보다 큰사람 조회

1. 김경호 키조회
2. 김경호보다 키 큰 사람 조회

⇒ 이걸 한번에 쓴다 

```sql
SELECT * FROM usertbl WHERE height > (SELECT height FROM usertbl WHERE name = '김경호');
```

사는 지역이 경남인 사람 보다 키가 큰 사람 

```sql
SELECT * FROM usertbl WHERE height > (SELECT height FROM usertbl WHERE addr = '경남');
```

- 위와 같이 하면 경남에 사는 사람이 한명이 아닐 것이다  (170, 173 리턴)

⇒ 이럴때 사용 하는 것이 ANY (사용 하면 170이나 173둘중에 아무나 커도 되게 리턴)

```sql
SELECT * FROM usertbl WHERE height > ANY(SELECT height FROM usertbl WHERE addr = '경남');
```

⇒ ALL을 사용하면 둘다 만족해야함 즉 170보다 크고 173보다 큼  = 173 보다 큼 

```sql
SELECT * FROM usertbl WHERE height >= ALL(SELECT height FROM usertbl WHERE addr = '경남');
```

원하는 순서대로 출력 order by

: 있던 없던 결과에 영향을 안미침

```sql
SELECT name, mDate FROM usertbl order by mDate;
```

- 가입일이 빠른 순으로 출력 (오름 차순ASC 생략 가능)
- 기본 오름 차순

```sql
SELECT name, mDate FROM usertbl order by mDate DESC;
```

- 내림 차순

두개를 중복으로 사용 가능

키가 큰 순서대로 정렬 하는데 같다면 내림 차순으로 

```sql
SELECT * FROM usertbl order by height DESC, name ASC;
```

⇒ orderBy 절은 보기는 좋으나 MySQL의 성능에 영향을 줄 수 있으므로 되도록 사용하지 않는다 

DISTINCT 구문

```sql
SELECT DISTINCT addr FROM usertbl;
```

- 중복제거하여 출력 된다

limit 출력 개수 제한

끝에 LIMIT 5 를 붙여준다  : 상위 5개 출력

LIMIT 0,5;  0번째 부터 5개 출력 

테이블 복사 

```sql
CREATE TABLE 테이블 이름 (SELECT * FROM buytbl);
```

- 제약 조건은 복사가 안된( pk, fk….)
